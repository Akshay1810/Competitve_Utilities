#include<bits/stdc++.h>
using namespace std;

vector<int> smallestRange(vector<vector<int>> nums) {
    vector<pair<int,int>> v;
    for(int i = 0 ; i < nums.size() ; i++){
        for(int j = 0 ; j < nums[i].size(); j++){
            v.push_back({nums[i][j], i});
        }
    }
    sort(v.begin(), v.end());
    // for(auto it:v){
    //     cout<<it.first<<" "<<it.second<<endl;
    // }
    unordered_map<int,int> umap;
    int mini = INT_MAX;
    int i = 0, j = 0;
    int rang0 = 0, rang1 = 0;
    while(j < v.size()){
        umap[v[j].second]++;
        if(umap.size() == nums.size()){
            while(i <= j and umap.size() == nums.size()){
                umap[v[i].second]--;
                if(umap[v[i].second] == 0){
                    umap.erase(umap.find(v[i].second));
                }
                if(v[j].first-v[i].first < mini){
                    mini = v[j].first-v[i].first;
                    rang0 = v[i].first;
                    rang1 = v[j].first;
                }
                i++;
            }
        }
        j++;
    }
    while(i <= j and umap.size() == nums.size()){
        umap[v[i].second]--;
        if(umap[v[i].second] == 0){
            umap.erase(umap.find(v[i].second));
        }
        if(v[j].first-v[i].first < mini){
            mini = v[j].first-v[i].first;
            rang0 = v[i].first;
            rang1 = v[j].first;
        }
        i++;
    }
    return {rang0, rang1};
}